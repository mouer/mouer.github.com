<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[废纸君]]></title>
  <link href="http://mouer.github.com/atom.xml" rel="self"/>
  <link href="http://mouer.github.com/"/>
  <updated>2013-05-06T10:14:19+08:00</updated>
  <id>http://mouer.github.com/</id>
  <author>
    <name><![CDATA[Chen.Qi]]></name>
    <email><![CDATA[mouer73@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDG语言沙龙]]></title>
    <link href="http://mouer.github.com/blog/2013/05/06/google-developer-groups/"/>
    <updated>2013-05-06T10:12:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/05/06/google-developer-groups</id>
    <content type="html"><![CDATA[<p>昨天下午去参加了北京的GDG沙龙，有些收获，当然拿到<code>T shirt</code>是最大的收获。T_T!!</p>

<h4>golang</h4>

<p>golang的分享者是<a href="http://weibo.com/xushiweizh">@许式伟</a>，可能是我孤弱寡闻，或者脑残项目做多了，以前没有听说过，给我的感觉是，许老师在台上控场力不是很强，但是对golang，erlang，c++，java的特性顺手聂来，如数家珍，就《Go, 基于连接与组合的语言》的话题，把golang的组合和连接特性讲的十分透彻。对我而言感觉有些问题一下子想通了，回家查了下，许老师是前盛大资深研究员，前金山技术总监，WPS Office 2005首席架构，好吧，牛人表里面有多了一位。</p>

<h4>erlang</h4>

<p>说实话，以前对erlang的了解少之又少，少到语法是什么样子的都不知道。以为是腐朽的，远古的，但是<a href="http://weibo.com/lianchengzju">连城404</a>的分享的《用Erlang构建容错系统》让我知道自己错的多么离谱，对于连同学，感觉是个很有意思的人，风趣幽默，这里推荐他的<a href="http://blog.liancheng.info/job-hunting-in-california/#.UYcLCFu-Nvd">加州求职记</a>， 有兴趣的同学可以看看，而对于erlang，看来我也有必要看看了。</p>

<h4>dart</h4>

<p>在<a href="http://weibo.com/hanguokai">Jackie Han</a>上台之前，我一直以为这哥们是个健身教练呢，目测是所有已知程序员里面胳膊最粗的一只。因为个人原因，对dart不太感冒，随意听了听语法，完事。</p>

<p>事后趁合影时候偷摸跑掉，鲁串喝酒去了。</p>

<p>PS：文中列出这次沙龙的分享着的weibo，有兴趣的同学看看吧，师兄只能帮你到这里了。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[也来谈谈java-HashMap]]></title>
    <link href="http://mouer.github.com/blog/2013/04/30/java-hashmap/"/>
    <updated>2013-04-30T22:35:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/04/30/java-hashmap</id>
    <content type="html"><![CDATA[<p>从源码中得到的信息：</p>

<p>1 HashMap没最大容量限制，超出Integer.MAX_VALUE后，size不准确。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">newCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">[]</span> <span class="n">oldTable</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">==</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Entry</span><span class="o">[]</span> <span class="n">newTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">newCapacity</span><span class="o">];</span>
</span><span class='line'>    <span class="n">transfer</span><span class="o">(</span><span class="n">newTable</span><span class="o">);</span>
</span><span class='line'>    <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'>    <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">newCapacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 HashMap的hash,hash的目的是使其均匀，当然，没有重复是做好状态，相信很多人看过这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// This function ensures that hashCodes that differ only by</span>
</span><span class='line'>    <span class="c1">// constant multiples at each bit position have a bounded</span>
</span><span class='line'>    <span class="c1">// number of collisions (approximately 8 at default load factor).</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>猛一看，瞬间吓尿了。。我们来分析一下： <a href="http://stackoverflow.com/questions/9335169/understanding-strange-java-hash-function">也可以看这里</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h1</span> <span class="o">=</span> <span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h2</span> <span class="o">=</span> <span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h3</span> <span class="o">=</span> <span class="n">h1</span> <span class="o">^</span> <span class="n">h2</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h4</span> <span class="o">=</span> <span class="n">h</span> <span class="o">^</span> <span class="n">h3</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h5</span> <span class="o">=</span> <span class="n">h4</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h6</span> <span class="o">=</span> <span class="n">h4</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h7</span> <span class="o">=</span> <span class="n">h5</span> <span class="o">^</span> <span class="n">h6</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h8</span> <span class="o">=</span> <span class="n">h4</span> <span class="o">^</span> <span class="n">h7</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h1</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h2</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h3</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h4</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h5</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h6</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h7</span> <span class="o">);</span>
</span><span class='line'>    <span class="n">printBin</span> <span class="o">(</span> <span class="n">h8</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">static</span> <span class="kt">void</span> <span class="nf">printBin</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">h</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span> <span class="o">(</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span> <span class="o">(</span> <span class="s">&quot;%32s&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span> <span class="o">(</span> <span class="n">h</span> <span class="o">)</span> <span class="o">).</span><span class="na">replace</span> <span class="o">(</span> <span class="sc">&#39; &#39;</span><span class="o">,</span> <span class="sc">&#39;0&#39;</span> <span class="o">)</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>prints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">11111111111111111111111111111111</span>
</span><span class='line'><span class="mi">00000000000000000000111111111111</span>
</span><span class='line'><span class="mi">00000000000011111111111111111111</span>
</span><span class='line'><span class="mi">00000000000011111111000000000000</span>
</span><span class='line'><span class="mi">11111111111100000000111111111111</span>
</span><span class='line'><span class="mi">00000001111111111110000000011111</span>
</span><span class='line'><span class="mi">00001111111111110000000011111111</span>
</span><span class='line'><span class="mi">00001110000000001110000011100000</span>
</span><span class='line'><span class="mi">11110001111100001110111100011111</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 存储结构：</p>

<p>table&amp;entry满足下面等式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 如果, 其中length是hashmap的长度，默认是1&lt;&lt;30</span>
</span><span class='line'><span class="n">hash</span><span class="o">(</span><span class="n">entryA</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">entryB</span><span class="o">.</span><span class="na">key</span><span class="o">)</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">entryA</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">)</span>
</span><span class='line'><span class="c1">// 那么, 其中-&gt;表示指向,A.B的谁后添加，谁在前面</span>
</span><span class='line'><span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-&gt;</span> <span class="n">enrtyA</span> <span class="o">&amp;</span> <span class="n">entryA</span><span class="o">.</span><span class="na">next</span> <span class="o">-&gt;</span> <span class="n">entryB</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 cpu百分百问题：</p>

<p>真是挺纳闷为什么有那么多蛋疼的人包括自己在研究hashMap的这个问题，在不正当的使用情况下，如多个线程有些插入，有些读取，会出现cpu 100%的情况，有可能是get，有可能是put。</p>

<p>其中<a href="http://code.alibabatech.com/blog/dev_related_969/hashmap-result-in-improper-use-cpu-100-of-the-problem-investigated.html">淘宝大牛</a>应该分析出了一些情况，但是感觉有些片面。因为扩容之后，以前同一个table[i]下的节点，不一定映射到新table的同一个i上，加之java内存屏障的存在，非线程安全的方法，线程间同步共享变量的时机模糊不定。</p>

<p>在自己做的试验里面：</p>

<ul>
<li>把hashMap源码copy出一份，在扩容后打印 entry entry.next entry.next.next。</li>
<li>有出现 entry = entry.next.next 的情况。</li>
<li>但更多100%的情况无迹可循。</li>
</ul>


<p>所以大家知道会出问题就好，不要乱折腾这个了，说不定不同版本的jdk的源码都不一样呢。</p>

<p>絮絮叨叨一大堆。说给自己吧。看《蛇蝎美人》去了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java-spi机制介绍]]></title>
    <link href="http://mouer.github.com/blog/2013/04/24/java-spi/"/>
    <updated>2013-04-24T22:20:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/04/24/java-spi</id>
    <content type="html"><![CDATA[<p>SPI指<code>Service Provider Interface</code>，在开源项目中常常能看到，主要是定义好接口，让别人去完善这个功能。</p>

<p>如要开发一个文本编辑器，已经实现了现在市面上所有的文件类型，但过了一阵子忽然冒出来个新的文件类型，就不能用了。</p>

<p>如果通过<code>Java SPI</code>开发的解析接口（<code>com.edit.service.ParseFile</code>），那么给用户一个补丁包，这个补丁包仅仅包括一个jar包：</p>

<ul>
<li>一个解析新文件类型的实现(com.edit.service.impl.ParseXXXFileImpl)</li>
<li>META-INF/services/com.edit.service.ParseFile 写入 com.edit.service.impl.ParseXXXFileImpl</li>
</ul>


<p>把补丁包放入class path 里就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ohoo</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ServiceLoader</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * User: chen.qi</span>
</span><span class='line'><span class="cm"> * Date: 13-4-24</span>
</span><span class='line'><span class="cm"> * Time: 下午9:54</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSPI</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServiceLoader</span><span class="o">&lt;</span><span class="n">ContainerService</span><span class="o">&gt;</span> <span class="n">serviceLoader</span> <span class="o">=</span> <span class="n">ServiceLoader</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">ContainerService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">ContainerService</span> <span class="n">containerService</span> <span class="o">:</span> <span class="n">serviceLoader</span><span class="o">){</span>
</span><span class='line'>            <span class="n">containerService</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>            <span class="n">containerService</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ohoo</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * User: chen.qi</span>
</span><span class='line'><span class="cm"> * Date: 13-4-24</span>
</span><span class='line'><span class="cm"> * Time: 下午9:49</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ContainerService</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ohoo</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">impl</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ohoo.spi.service.ContainerService</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * User: chen.qi</span>
</span><span class='line'><span class="cm"> * Date: 13-4-24</span>
</span><span class='line'><span class="cm"> * Time: 下午9:51</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CContainerServiceImpl</span> <span class="kd">implements</span> <span class="n">ContainerService</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;c start ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;c stop ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>META-INF/services/com.ohoo.spi.service.ContainerService</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">ohoo</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">AContainerServiceImpl</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">ohoo</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">BContainerServiceImpl</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">ohoo</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">CContainerServiceImpl</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-flow的介绍及使用]]></title>
    <link href="http://mouer.github.com/blog/2013/04/23/use-git-flow/"/>
    <updated>2013-04-23T14:12:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/04/23/use-git-flow</id>
    <content type="html"><![CDATA[<h4>git-flow 简介</h4>

<p>git-flow基于git，是根据实际经验设计出一套基于分支的开发/发布模型。</p>

<p>项目地址： <a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a></p>

<p>模型概念如下图：</p>

<p><img src="http://ww1.sinaimg.cn/mw690/47838533jw1e40pstu5toj20gz0mn0va.jpg" alt="git-flow-sketch" /></p>

<h4>安装使用纪录</h4>

<p>因为公司服务器是svn，本地用git-svn + git-flow，所以hotfix功能一直没用</p>

<p>用的是<code>git flow feature start xxx</code> 简单纪录如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 安装git-flow</span>
</span><span class='line'>brew install git-flow
</span><span class='line'><span class="c"># 开启zsh的git-flow插件</span>
</span><span class='line'><span class="nv">plugins</span><span class="o">=(</span>git git-flow brew svn rake vim<span class="o">)</span>
</span><span class='line'><span class="c"># 初始化以后的git目录, 一路回车下一步</span>
</span><span class='line'><span class="nb">cd </span>xxx <span class="o">&amp;&amp;</span> git flow init
</span><span class='line'><span class="c"># 开始做一个需求， 会自动切换到feature/task1分支，这时候可以写代码。</span>
</span><span class='line'>git flow feature start task1
</span><span class='line'><span class="c"># 当这个需求做完了。这时候会把task1的提交merge回develop中</span>
</span><span class='line'>git flow feature finish task1
</span><span class='line'><span class="c"># 对于git-svn用户，那么可以提交到svn了</span>
</span><span class='line'>git svn rebase;
</span><span class='line'>git svn dcommit;
</span></code></pre></td></tr></table></div></figure>


<p>很多方法正在摸索，不定时更新之。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oh-my-zsh安装使用]]></title>
    <link href="http://mouer.github.com/blog/2013/04/20/oh-my-zsh-install/"/>
    <updated>2013-04-20T22:23:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/04/20/oh-my-zsh-install</id>
    <content type="html"><![CDATA[<p><strong>无意中发现这个最近在github上很火爆的oh-my-zsh，又查询了下zsh，发现兼容bash，那果断升级了。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># clone project</span>
</span><span class='line'>git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
</span><span class='line'><span class="c"># 拷贝配置文件</span>
</span><span class='line'>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</span><span class='line'><span class="c"># 设置默认是zsh</span>
</span><span class='line'>chsh -s /bin/zsh
</span><span class='line'><span class="c"># 修改默认更新时间</span>
</span><span class='line'>vim ~/.zshrc
</span><span class='line'><span class="nb">export </span><span class="nv">UPDATE_ZSH_DAYS</span><span class="o">=</span>1
</span><span class='line'><span class="c"># 添加插件</span>
</span><span class='line'>vim ~/.zshrc
</span><span class='line'><span class="nv">plugins</span><span class="o">=(</span>git brew svn<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有的主题接图： <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>

<p>所有的插件名字： <a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins</a></p>

<p><strong>注意</strong> 别忘了导入自己定义的PATH.</p>

<p><img src="http://ww4.sinaimg.cn/mw690/47838533jw1e40psv5eqrj20hl0bkwgf.jpg" alt="zsh-demo1" />
<img src="http://ww3.sinaimg.cn/mw690/47838533jw1e40psufltsj20ki0m642u.jpg" alt="zsh-demo2" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Java虚拟机（JVM）]]></title>
    <link href="http://mouer.github.com/blog/2013/04/17/Jvm/"/>
    <updated>2013-04-17T21:53:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/04/17/Jvm</id>
    <content type="html"><![CDATA[<h1>Java虚拟机</h1>

<p><img src="http://ww1.sinaimg.cn/mw690/47838533jw1e40psx1tkbg208c05kgli.gif" alt="jvm-logo" /></p>

<h2>概述</h2>

<p><strong>JVM</strong>, 是让JAVA凌驾与操作系统之上的一个程序。大内总管的角色。</p>

<p>纵观历史，感觉Java的崛起JVM功不可没，很多大牛都是被那句对外声称的“<strong>编写一次，到处运行</strong>”勾引过来的。</p>

<p>近些年，JVM已经发展成一个生态圈，里面有众多语言，当然，如：</p>

<blockquote><p>Jython &gt; http://www.jython.org/</p>

<p>JRuby &gt; http://JRuby.org/</p>

<p>Groovy &gt; http://groovy.codehaus.org/</p>

<p>Scala &gt; http://www.scala-lang.org/</p></blockquote>

<h3>哪里可以找到JVM？</h3>

<pre><code>windows:
    jdk/jre/bin/jvm.dll
    jdk/jvm.dll
linux:
    没找到，官方文档没有。知道的同学可以告诉下。
</code></pre>

<h4>JRE</h4>

<pre><code>JRE（Java Runtime Environment，Java运行环境），是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。
核心类库：jre/lib/rt.jar
java.awt.*
java.lang.*
java.io.*
java.net.*

javax.imageio.*
javax.net.ssl.*
javax.swing.*

org.w3c.dom.*
</code></pre>

<p>所以，运行java程序，rt.jar必须包含在classPath里面。</p>

<h4>JDK</h4>

<pre><code>JDK (Java Development Kit, JAVA开发者工具) ， 提供各种开发者工具，最主要的功能是 *.java -&gt; *.class

传奇jar包 ： jdk/lib/dt.jar and jdk/lib/tools.jar

不知道大家注意没有，在安装完IDE，选择完jdk的路径之后，tools和dt.jar并没有加入到环境变量里面。也就是说明，我们平时编写程序，用不到这2个jar包。

tools.jar: jdk/bin下比/jdk/jre/bin下多的功能，都是由tools实现。
    mouer@mouer-MacBook@02:02:09:~/Desktop/jdk1.7.0_05/bin
    $du -h *
    8.0K    javac
    8.0K    javah
    8.0K    javap

    我们看到每个命令及其的小，这是不科学的，实际上早期的jdk版本如1.4，java和javac等命令都是可以用vim查看的（当然是在linux下）。
    javac = java -p=$JAVA_HOME/lib/tools.jar xx.xxx.Main XXX.java
    最后把java便宜成class。
</code></pre>

<hr />

<pre><code>dt.jar: BeanInfo设计类 swing 相关，告诉ide，哪个属性可以设置，哪个不可以设置，在NetBeans下用GUIDesigner的时候会叫你选择，找到一篇文章，看了一遍没有理解，只知道个大概，有兴趣同学可以参考：

http://www.blogjava.net/landon/archive/2011/05/15/350285.html
</code></pre>

<h4>运行java Test.java后，java都干了什么(openJDK1.5, Oracle的没有找到)</h4>

<pre><code>public class Test {
    public static void main(String[] args){
        System.out.println("hello world!")
    }
}

1. 根据$PATH定位JAVA的据对路径。
2. 加载JVM.conf文件
3. 调用Java_md.c中的方法检查环境是否一致（平台，cpu架构）
4. 调用系统（linux：LoadLibray）api装载JVM
5. 初始化JVM，获得JNI调用接口
6. 调用java.c的LoadClass加载Test.class
7. 解释执行。
</code></pre>

<h3>运行时数据区域</h3>

<p><img src="http://ww4.sinaimg.cn/mw690/47838533jw1e40pswr62jj20at083mxg.jpg" alt="jvm-yunxing" /></p>

<h4>程序计数器</h4>

<p>对于一个运行中的Java程序而言，其中的每一个线程都有它自己的PC（程序计数器），在线程启动时创建。 大小是一个字长。它的作用可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作的时候就是通过改变这个计数器的值来选取下一条要执行的字节码命令，如分支，循环，跳转，异常处理，线程恢复。</p>

<p><strong>在规范中唯一没有规定OutOfMemoryError情况的区域。</strong></p>

<h4>虚拟机栈</h4>

<p>java栈由许多栈帧(stack frame)组成的，栈帧主要包含局部变量表，存放了编译可知的各种基本数据类型(boolean, byte, char, short, int, float, long, double)，对象引用类型(d, ints) <strong>32位机器占4个字节，64位机器占8个字节</strong>。</p>

<pre><code>int[] ints = ArrayUtils.EMPTY_INT_ARRAY;
Deal d = dealService.getDeal(66666);
</code></pre>

<p>当一个线程调用java方法时，虚拟机压入一个新的栈帧到java栈中，当方法返回的时候，这个栈帧被从java栈弹出并被抛弃。</p>

<p><img src="http://ww1.sinaimg.cn/mw690/47838533jw1e40psw99fkj20ci0c90t7.jpg" alt="jvm-stack" /></p>

<pre><code>方法调用：
线程一：A-&gt;B-&gt;C-&gt;D;
线程二：A-&gt;B-&gt;C;
线程三：A-&gt;B-&gt;native
</code></pre>

<p><strong>在这个区域，规范中定义了StackOverflowError和OutOfMemoryError。</strong></p>

<h4>本地方法栈</h4>

<p>本地方法栈，顾名思义，用来存放本地方法，和虚拟机栈工作原理相同。</p>

<p><strong>貌似 Sun HotSpot 将虚拟机栈和本地方法栈合二为一了， 在网站上没有找到相关介绍，待验证。</strong></p>

<h4>Java堆</h4>

<p>是jvm所管理的内存中最大的一块。java堆是被所有线程<strong>共享</strong>的一块区域.</p>

<p>jvm规范中是这么描述的，The heap is the runtime data area from which memory for <strong>all class instances and arrays</strong> is allocated. （所有的对象和数组都在这个区域）</p>

<pre><code>不过，在jdk1.6中，加入了一项功能，在代码运行的时候，进行逃逸分析（Escape Analysis）， 功能很多，其中一个作用是，如果能够证明别的方法或者线程不能通过任何途径访问道一个对象。那么这个对象将在栈上分配。打破了栈和堆的限制。有兴趣的同学可以研究下。
</code></pre>

<p><a href="http://dl.acm.org/citation.cfm?id=320386">http://dl.acm.org/citation.cfm?id=320386</a>  Escape analysis for Java - Choi</p>

<h4>方法区</h4>

<p>和java堆一样，是各个线程共享的内存区域，它用于存储已被jvm加载的信息，常量，静态变量。</p>

<p>摘抄（未验证）：</p>

<pre><code>对于习惯在HotSopt虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区成为“永久代”，本质上两者不相等，仅仅是因为HotSpot虚拟机的设计团队把GC分代筹集扩致方法区，或者说使用永久代来实现方法区而已，对于其他团队（BEA，IBM）来说是不存在永久代的概念的。即使HotSpot虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory来实现方法去的规划了。

这说明在我们用的jvm中，方法区存在于堆中，和一般网上说的信息相符。
</code></pre>

<h4>运行时常量</h4>

<p>存放String， 是方法区的一部分， 看资料说HotSopt放在堆中。</p>

<h4>直接内存</h4>

<p>非jvm控制， 但是超过物理内存的限制，会抛出OutOfMemoryError，jdk1.4 NIO 中的 Channel 和 Buffer 的io方式。</p>

<h3>各种异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -Xms10m -Xmx10m</span>
</span><span class='line'><span class="cm"> * 结果：java.lang.OutOfMemoryError: Java heap space堆超过10m抛出。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>    
</span><span class='line'>  <span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -Xss128k</span>
</span><span class='line'><span class="cm"> * 结果：java.lang.StackOverflowError栈深度大于jvm允许的深度，抛出之。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">SOF</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SOF</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">SOF</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">SOF</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SOF</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SOF</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>  
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -Xss2m</span>
</span><span class='line'><span class="cm"> * 结果：java.lang.OutOfMemoryError: unable to create new native thread慎用，死机。。。。！！！！</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">(){</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="c1">// doNothing...</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">});</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 常量池溢出</span>
</span><span class='line'><span class="cm"> * VM Args: -XX:PermSize=5m -XX:MaxPermSize=5m</span>
</span><span class='line'><span class="cm"> * 结果：java.lang.OutOfMemoryError: PermGen space</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">+</span> <span class="n">i</span><span class="o">++);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>  
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * VM Args: -XX:MaxDirectMemorySize=5m -Xmx10m</span>
</span><span class='line'><span class="cm"> * 结果：java.lang.OutOfMemoryError</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>        
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">Field</span> <span class="n">field</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">field</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">allocateMemory</span><span class="o">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>垃圾收集器</h3>

<h4>Serial 收集器</h4>

<pre><code>Serial 收集器是最基本、历史最悠久的收集器，单线程的方式收集新生代的收集器，进行收集工作时会停止用户所有的工作线程（Stop the world），比较适合运行在 **Client** 模式下的虚拟机。
</code></pre>

<h4>ParNew 收集器</h4>

<pre><code>Serial 收集器的多线程版本，是运行在 **Server** 模式下虚拟机首选的新生代收集器，可以使用 -XX:+UseParNewGC 选项来强制指定它。
</code></pre>

<h4>Parallel Scavenge 收集器</h4>

<pre><code>使用了复制算法的新生代收集器，和 ParNew 一样，也是多线程实现的，他们的区别在于：Parallel Scavenge 收集器关注的是尽可能地达到一个可控的吞吐量，如虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，则吞吐量就是99%。
</code></pre>

<h4>Serial Old 收集器</h4>

<pre><code>Serial 收集器的老年代版本，使用“标记-整理”算法，比较时候在 Client 模式的虚拟机使用。
</code></pre>

<h4>Parallel Old 收集器</h4>

<pre><code>Parallel Scavenge 收集器的老年代版本，使用多线程的“标记-整理”算法。
</code></pre>

<h4>CMS （Concurrent Mark Sweep）收集器</h4>

<pre><code>CMS 收集器是一种以获取最短回收停顿时间为目标的收集器，基于“标记-清除”算法。
</code></pre>

<h4>G1 (Garbage First) 收集器</h4>

<pre><code>理论上的下一代收集器。jdk1.6 update14 后，跟随一个测试版，jdk1.7默认收集器。
牛逼的它号称不会产生碎片，适合长时间运行，取消新生代和老年代的定义，划分成固定大小的独立空间。
后台有个优先级的列表，清理垃圾最多的块（这可能是名字的由来）
</code></pre>

<h4>各种垃圾收集器搭配的方式</h4>

<p><img src="http://ww3.sinaimg.cn/mw690/47838533jw1e40psvjwu1j20hv0h5q3q.jpg" alt="jvm-gc" /></p>

<p>官方推荐搭配：</p>

<pre><code>* Parallel Scavenge + Parallel Old
* ParNew + CMS
</code></pre>

<p>一般来说，如果能使用 Parallel Scavenge + Parallel Old 的话就不要用 CMS，因为 Parallel 的吞吐量率更高，只要停顿时间不是太长的话，就不需要使用CMS收集器。</p>

<h3>优化建议</h3>

<pre><code>1.建议用64位操作系统，Linux下64位的jdk比32位jdk要慢一些，但是吃得内存更多，吞吐量更大。 
2.XMX和XMS设置一样大，MaxPermSize和MinPermSize设置一样大，这样可以减轻伸缩堆大小带来的压力。
3.调试的时候设置一些打印参数，如-XX:+PrintClassHistogram -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:log/gc.log，这样可以从gc.log里看出一些端倪出来。
4.系统停顿的时候可能是GC的问题也可能是程序的问题，多用jmap和jstack查看。
5.仔细了解自己的应用，如果用了缓存，那么年老代应该大一些，缓存的HashMap不应该无限制长，建议采用LRU算法的Map做缓存，LRUMap的最大长度也要根据实际情况设定。
6.不管怎样，永久代还是会逐渐变满，所以隔三差五重起java服务器是必要的。
7.采用并发回收时，年轻代小一点，年老代要大，因为年老大用的是并发回收，即使时间长点也不会影响其他程序继续运行，网站不会停顿。 

在Resin论坛看到这样一个配置，据说比较牛B，8个G的情况下：
$JAVA_ARGS .= " -Dresin.home=$SERVER_ROOT -server
-Xms6000M -Xmx6000M -Xmn500M -XX:PermSize=500M -XX:MaxPermSize=500M
-XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0 -Xnoclassgc
-XX:+DisableExplicitGC -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
-XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0
-XX:+CMSClassUnloadingEnabled -XX:-CMSParallelRemarkEnabled
-XX:CMSInitiatingOccupancyFraction=90 -XX:SoftRefLRUPolicyMSPerMB=0
-XX:+PrintClassHistogram -XX:+PrintGCDetails -XX:+PrintGCTimeStamps
-XX:+PrintHeapAtGC -Xloggc:log/gc.log "

要满足：(Xmx-Xmn)*(100-CMSInitiatingOccupancyFraction)/100&gt;=Xmn
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建github博客]]></title>
    <link href="http://mouer.github.com/blog/2012/12/15/Octopress/"/>
    <updated>2012-12-15T21:53:00+08:00</updated>
    <id>http://mouer.github.com/blog/2012/12/15/Octopress</id>
    <content type="html"><![CDATA[<p> 因为gfw的原因，Google App Engine当真实蛋疼的紧，有不想花钱弄主机，就在这里搞的blog吧，记录下安装步骤。</p>

<h1>安装</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bash -s stable &lt; &lt;<span class="o">(</span>curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer<span class="o">)</span> <span class="c"># 安装RVM</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; . &quot;$HOME/.rvm/scripts/rvm&quot; &#39;</span> &gt;&gt; ~/.bash_profile    <span class="c"># 添加环境变量到 ~/.bash_profile</span>
</span><span class='line'><span class="nb">source</span> ~/.bash_profile  <span class="c"># source 一下，让它起作用</span>
</span><span class='line'>rvm install 1.9.3    <span class="c"># 安装ruby1.9.3 (rvm install 1.9.3 --with-gcc=clang)</span>
</span><span class='line'>rvm 1.9.3 --default  <span class="c"># 设置ruby默认版本为1.9.3</span>
</span><span class='line'>ruby --version       <span class="c"># 查看当前ruby版本是否已经被设置1.9.3</span>
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress  <span class="c">#从github clone octopress的源代码</span>
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'><span class="c"># 安装一些依赖</span>
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install  <span class="c"># 安装主题</span>
</span><span class='line'>rake preview  <span class="c"># 本地预览 （http://localhost:4000/）</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意</h2>

<p>如果有同学觉得 <strong>gem</strong> 或者 <strong>rvm</strong> 使用缓慢可以尝试淘宝的ruby源。
<a href="http://ruby.taobao.org/">taoBaoRuby</a></p>

<h1>把blog部署到github</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>rake setup_github_pages <span class="c"># 和github创建关联</span>
</span><span class='line'>git@github.com:your_username/your_username.github.com.git   <span class="c"># 提示输入github URL</span>
</span><span class='line'>rake generate <span class="c"># 把你所有编辑的内容生成你的Blog静态页面</span>
</span><span class='line'>rake deploy   <span class="c"># 如果检查没有任何问题就可以 push 你的 blog 到 github master branch </span>
</span><span class='line'>＃ 状态检查
</span><span class='line'><span class="nb">cd</span> ~/octopress    
</span><span class='line'>git status   <span class="c"># 应该显示 On branch source</span>
</span><span class='line'><span class="nb">cd </span>_deploy/  <span class="c"># 应该显示 On branch master</span>
</span><span class='line'>＃ 最后提交到source branch
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;first commit&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span> <span class="c"># 如果这一步出错，请再次检查仓库名称是否按要求命名，同时检查Admin面板下Default Branch是否为 master</span>
</span></code></pre></td></tr></table></div></figure>


<h2>更新Octopress</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git pull octopress master     <span class="c"># Get the latest Octopress</span>
</span><span class='line'>bundle install                <span class="c"># Keep gems updated</span>
</span><span class='line'>rake update_source            <span class="c"># update the template&#39;s source</span>
</span><span class='line'>rake update_style             <span class="c"># update the template&#39;s style</span>
</span></code></pre></td></tr></table></div></figure>


<h2>新建文章</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>        <span class="c"># yyyy-MM-dd-post-title.md</span>
</span></code></pre></td></tr></table></div></figure>


<h2>分类方式</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>categories: <span class="o">[</span>octopreess, github<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如果已经存在了github上面的Octopress，取回本地的操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone -b <span class="nb">source </span>git@github.com:username/username.github.com.git octopress <span class="c"># get the source code from your &quot;source&quot; branch of your octopress on github</span>
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>git clone git@github.com:username/username.github.com.git _deploy <span class="c"># get your static pages content from your &quot;master&quot;branch of your cotopress on github</span>
</span></code></pre></td></tr></table></div></figure>


<h2>一般操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1. rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span><span class='line'>2. 快乐的点东西
</span><span class='line'>3. rake generate
</span><span class='line'>4. rake deploy
</span><span class='line'>5. git add . <span class="o">&amp;&amp;</span> git commit -am <span class="s1">&#39;blog&#39;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>     <span class="c"># 把写的文件备份到source分支</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
