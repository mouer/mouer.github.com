<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spi | 废纸君]]></title>
  <link href="http://mouer.github.com/blog/categories/spi/atom.xml" rel="self"/>
  <link href="http://mouer.github.com/"/>
  <updated>2013-05-14T00:43:58+08:00</updated>
  <id>http://mouer.github.com/</id>
  <author>
    <name><![CDATA[Chen.Qi]]></name>
    <email><![CDATA[mouer73@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java-spi机制介绍]]></title>
    <link href="http://mouer.github.com/blog/2013/04/24/java-spi/"/>
    <updated>2013-04-24T22:20:00+08:00</updated>
    <id>http://mouer.github.com/blog/2013/04/24/java-spi</id>
    <content type="html"><![CDATA[<p>SPI指<code>Service Provider Interface</code>，在开源项目中常常能看到，主要是定义好接口，让别人去完善这个功能。</p>

<p>如要开发一个文本编辑器，已经实现了现在市面上所有的文件类型，但过了一阵子忽然冒出来个新的文件类型，就不能用了。</p>

<p>如果通过<code>Java SPI</code>开发的解析接口（<code>com.edit.service.ParseFile</code>），那么给用户一个补丁包，这个补丁包仅仅包括一个jar包：</p>

<ul>
<li>一个解析新文件类型的实现(com.edit.service.impl.ParseXXXFileImpl)</li>
<li>META-INF/services/com.edit.service.ParseFile 写入 com.edit.service.impl.ParseXXXFileImpl</li>
</ul>


<p>把补丁包放入class path 里就可以了。</p>

<p>```java
package com.ohoo.spi.service;
import java.util.ServiceLoader;
/<em>*
 * User: chen.qi
 * Date: 13-4-24
 * Time: 下午9:54
 </em>/
public class TestSPI {</p>

<pre><code>public static void main(String[] args) {
    ServiceLoader&lt;ContainerService&gt; serviceLoader = ServiceLoader.load(ContainerService.class);
    for (ContainerService containerService : serviceLoader){
        containerService.start();
        containerService.stop();
    }
}
</code></pre>

<p>}
```</p>

<p>```java
package com.ohoo.spi.service;
/<em>*
 * User: chen.qi
 * Date: 13-4-24
 * Time: 下午9:49
 </em>/
public interface ContainerService {</p>

<pre><code>public void start();
public void stop();
</code></pre>

<p>}
```</p>

<p>```java
package com.ohoo.spi.service.impl;
import com.ohoo.spi.service.ContainerService;
/<em>*
 * User: chen.qi
 * Date: 13-4-24
 * Time: 下午9:51
 </em>/
public class CContainerServiceImpl implements ContainerService {</p>

<pre><code>@Override
public void start() {
    System.out.println("c start ...");
}
@Override
public void stop() {
    System.out.println("c stop ...");
}
</code></pre>

<p>}
```</p>

<p><code>META-INF/services/com.ohoo.spi.service.ContainerService</code></p>

<p><code>
com.ohoo.spi.service.impl.AContainerServiceImpl
com.ohoo.spi.service.impl.BContainerServiceImpl
com.ohoo.spi.service.impl.CContainerServiceImpl
</code></p>
]]></content>
  </entry>
  
</feed>
